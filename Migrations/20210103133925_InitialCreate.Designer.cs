// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MindYourMoodWeb.Data;

namespace MindYourMoodWeb.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210103133925_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.Activities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("ActivityDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.ActivityTimes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Achievement")
                        .HasColumnType("int");

                    b.Property<int?>("ActivityId")
                        .HasColumnType("int");

                    b.Property<string>("ActivityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Intimacy")
                        .HasColumnType("int");

                    b.Property<int>("Pleasure")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("ActivityTimes");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.Affirmation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AffirmationText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Affirmations");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.AlternativeThought", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Alternative")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BeliefRating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AlternativeThoughts");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.AppUserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("AppointmentTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("WithWhom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.AppointmentQuestion", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppointmentQuestions");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.Attitude", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ActionOf")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoAction")
                        .HasColumnType("int");

                    b.Property<int>("Feeling")
                        .HasColumnType("int");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.Property<string>("ToWhat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Attitudes");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.AutomaticThought", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("HotThought")
                        .HasColumnType("bit");

                    b.Property<string>("Thought")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AutomaticThoughts");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.ChuffChartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Achievement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AchievementDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ChuffChartType")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ChuffChartitems");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelephoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Uri")
                        .HasColumnType("int");

                    b.Property<bool>("UseEmergencyCall")
                        .HasColumnType("bit");

                    b.Property<bool>("UseEmergencyEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("UseEmergencySms")
                        .HasColumnType("bit");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.EvidenceAgainstHotThought", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Evidence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ThoughtRecordId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ThoughtRecordId");

                    b.ToTable("EvidenceAgainstHotThought");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.EvidenceForHotThought", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Evidence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ThoughtRecordId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ThoughtRecordId");

                    b.ToTable("EvidenceForHotThought");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.Fantasy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ActionOf")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoAction")
                        .HasColumnType("int");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.Property<string>("ToWhat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Fantasies");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.Feeling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ActionOf")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoAction")
                        .HasColumnType("int");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.Property<string>("ToWhat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Feelings");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.GenericText", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("TextType")
                        .HasColumnType("int");

                    b.Property<string>("TextValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("GenericTexts");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.Health", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ActionOf")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoAction")
                        .HasColumnType("int");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.Property<string>("ToWhat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Healths");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.Medication", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("MedicationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalDailyDosage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Medications");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.MedicationReminder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("MedicationDay")
                        .HasColumnType("int");

                    b.Property<int?>("MedicationSpreadId")
                        .HasColumnType("int");

                    b.Property<DateTime>("MedicationTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MedicationSpreadId");

                    b.ToTable("MedicationReminders");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.MedicationSpread", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Dosage")
                        .HasColumnType("int");

                    b.Property<int?>("MedicationId")
                        .HasColumnType("int");

                    b.Property<int>("Relevance")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicationId");

                    b.ToTable("MedicationsSpreads");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.MedicationTime", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("SpreadId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TakenTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SpreadId");

                    b.ToTable("MedicationTimes");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.Mood", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("MoodList")
                        .HasColumnType("int");

                    b.Property<int>("MoodRating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Moods");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.MoodList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("IsDefault")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsoCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoodName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("MoodLists");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.PlayList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrackCount")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PlayLists");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("MonthlyDay")
                        .HasColumnType("int");

                    b.Property<int>("PrescriptionType")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("WeeklyDay")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.Problem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ProblemText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Problems");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.ProblemIdea", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("IdeaText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProblemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProblemId");

                    b.ToTable("ProblemIdeas");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.ProblemProCon", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ProConText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProblemId")
                        .HasColumnType("int");

                    b.Property<int?>("StepId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProblemId");

                    b.HasIndex("StepId");

                    b.ToTable("ProblemProCons");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.ProblemStep", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("PriorityOrder")
                        .HasColumnType("int");

                    b.Property<string>("Step")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProblemSteps");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.ReRateMood", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("MoodId")
                        .HasColumnType("int");

                    b.Property<int>("MoodListId")
                        .HasColumnType("int");

                    b.Property<int>("MoodRating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MoodId");

                    b.ToTable("ReRateMoods");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.Reaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ActionOf")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoAction")
                        .HasColumnType("int");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.Property<string>("ToWhat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Reactions");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.Relationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ActionOf")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoAction")
                        .HasColumnType("int");

                    b.Property<int>("Feeling")
                        .HasColumnType("int");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.Property<string>("ToWhat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Relationships");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.SafetyPlanCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CalmMyself")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TellMyself")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("WillCall")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WillGoTo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SafetyPlanCards");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.Situation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("ThoughtRecordId")
                        .HasColumnType("int");

                    b.Property<string>("What")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("When")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Where")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Who")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ThoughtRecordId");

                    b.ToTable("Situations");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.SolutionPlan", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("PriorityOrder")
                        .HasColumnType("int");

                    b.Property<string>("SolutionStep")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SolutionsPlans");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.SolutionReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Achieved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("AchievedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdeaId")
                        .HasColumnType("int");

                    b.Property<string>("ReviewText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdeaId");

                    b.ToTable("SolutionReviews");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.TellMyself", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("TellText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TellTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TellMyselfList");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.ThoughtRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ThoughtRecords");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.Track", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Artist")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Duration")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<string>("Uri")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("MindYourMoodWeb.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("MindYourMoodWeb.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("MindYourMoodWeb.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("MindYourMoodWeb.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.Activities", b =>
                {
                    b.HasOne("MindYourMoodWeb.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.ActivityTimes", b =>
                {
                    b.HasOne("MindYourMoodWeb.Entities.Activities", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId");

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.Affirmation", b =>
                {
                    b.HasOne("MindYourMoodWeb.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.AlternativeThought", b =>
                {
                    b.HasOne("MindYourMoodWeb.Entities.ThoughtRecord", "ThoughtRecord")
                        .WithMany("AlternativeThoughts")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ThoughtRecord");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.AppUserRole", b =>
                {
                    b.HasOne("MindYourMoodWeb.Entities.AppRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MindYourMoodWeb.Entities.AppUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.Appointment", b =>
                {
                    b.HasOne("MindYourMoodWeb.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.AppointmentQuestion", b =>
                {
                    b.HasOne("MindYourMoodWeb.Entities.Appointment", "Appointment")
                        .WithMany("Questions")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.Attitude", b =>
                {
                    b.HasOne("MindYourMoodWeb.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.AutomaticThought", b =>
                {
                    b.HasOne("MindYourMoodWeb.Entities.ThoughtRecord", "ThoughtRecord")
                        .WithMany("AutomaticThoughts")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ThoughtRecord");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.ChuffChartItem", b =>
                {
                    b.HasOne("MindYourMoodWeb.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.Contact", b =>
                {
                    b.HasOne("MindYourMoodWeb.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.EvidenceAgainstHotThought", b =>
                {
                    b.HasOne("MindYourMoodWeb.Entities.AutomaticThought", "AutomaticThought")
                        .WithMany("EvidenceAgainstHotThought")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MindYourMoodWeb.Entities.ThoughtRecord", "ThoughtRecord")
                        .WithMany("EvidenceAgainst")
                        .HasForeignKey("ThoughtRecordId");

                    b.Navigation("AutomaticThought");

                    b.Navigation("ThoughtRecord");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.EvidenceForHotThought", b =>
                {
                    b.HasOne("MindYourMoodWeb.Entities.AutomaticThought", "AutomaticThought")
                        .WithMany("EvidenceForHotThought")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MindYourMoodWeb.Entities.ThoughtRecord", "ThoughtRecord")
                        .WithMany("EvidenceFor")
                        .HasForeignKey("ThoughtRecordId");

                    b.Navigation("AutomaticThought");

                    b.Navigation("ThoughtRecord");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.Fantasy", b =>
                {
                    b.HasOne("MindYourMoodWeb.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.Feeling", b =>
                {
                    b.HasOne("MindYourMoodWeb.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.GenericText", b =>
                {
                    b.HasOne("MindYourMoodWeb.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.Health", b =>
                {
                    b.HasOne("MindYourMoodWeb.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.Image", b =>
                {
                    b.HasOne("MindYourMoodWeb.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.Medication", b =>
                {
                    b.HasOne("MindYourMoodWeb.Entities.Prescription", "Prescription")
                        .WithMany("Medications")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.MedicationReminder", b =>
                {
                    b.HasOne("MindYourMoodWeb.Entities.MedicationSpread", "MedicationSpread")
                        .WithMany()
                        .HasForeignKey("MedicationSpreadId");

                    b.Navigation("MedicationSpread");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.MedicationSpread", b =>
                {
                    b.HasOne("MindYourMoodWeb.Entities.Medication", "Medication")
                        .WithMany()
                        .HasForeignKey("MedicationId");

                    b.Navigation("Medication");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.MedicationTime", b =>
                {
                    b.HasOne("MindYourMoodWeb.Entities.Medication", "Medication")
                        .WithMany("MedicationTimes")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MindYourMoodWeb.Entities.MedicationSpread", "Spread")
                        .WithMany("MedicationTimes")
                        .HasForeignKey("SpreadId");

                    b.Navigation("Medication");

                    b.Navigation("Spread");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.Mood", b =>
                {
                    b.HasOne("MindYourMoodWeb.Entities.ThoughtRecord", "ThoughtRecord")
                        .WithMany("Moods")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ThoughtRecord");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.MoodList", b =>
                {
                    b.HasOne("MindYourMoodWeb.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.PlayList", b =>
                {
                    b.HasOne("MindYourMoodWeb.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.Prescription", b =>
                {
                    b.HasOne("MindYourMoodWeb.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.Problem", b =>
                {
                    b.HasOne("MindYourMoodWeb.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.ProblemIdea", b =>
                {
                    b.HasOne("MindYourMoodWeb.Entities.ProblemStep", "Step")
                        .WithMany("Ideas")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MindYourMoodWeb.Entities.Problem", "Problem")
                        .WithMany()
                        .HasForeignKey("ProblemId");

                    b.Navigation("Problem");

                    b.Navigation("Step");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.ProblemProCon", b =>
                {
                    b.HasOne("MindYourMoodWeb.Entities.ProblemIdea", "Idea")
                        .WithMany("ProsAndCons")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MindYourMoodWeb.Entities.Problem", "Problem")
                        .WithMany()
                        .HasForeignKey("ProblemId");

                    b.HasOne("MindYourMoodWeb.Entities.ProblemStep", "Step")
                        .WithMany()
                        .HasForeignKey("StepId");

                    b.Navigation("Idea");

                    b.Navigation("Problem");

                    b.Navigation("Step");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.ProblemStep", b =>
                {
                    b.HasOne("MindYourMoodWeb.Entities.Problem", "Problem")
                        .WithMany("Steps")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.ReRateMood", b =>
                {
                    b.HasOne("MindYourMoodWeb.Entities.ThoughtRecord", "ThoughtRecord")
                        .WithMany("ReRateMoods")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MindYourMoodWeb.Entities.Mood", "Mood")
                        .WithMany()
                        .HasForeignKey("MoodId");

                    b.Navigation("Mood");

                    b.Navigation("ThoughtRecord");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.Reaction", b =>
                {
                    b.HasOne("MindYourMoodWeb.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.Relationship", b =>
                {
                    b.HasOne("MindYourMoodWeb.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.SafetyPlanCard", b =>
                {
                    b.HasOne("MindYourMoodWeb.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.Situation", b =>
                {
                    b.HasOne("MindYourMoodWeb.Entities.ThoughtRecord", "ThoughtRecord")
                        .WithMany("Situation")
                        .HasForeignKey("ThoughtRecordId");

                    b.Navigation("ThoughtRecord");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.SolutionPlan", b =>
                {
                    b.HasOne("MindYourMoodWeb.Entities.SolutionReview", "SolutionReview")
                        .WithMany("SolutionSteps")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SolutionReview");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.SolutionReview", b =>
                {
                    b.HasOne("MindYourMoodWeb.Entities.ProblemIdea", "Idea")
                        .WithMany()
                        .HasForeignKey("IdeaId");

                    b.Navigation("Idea");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.TellMyself", b =>
                {
                    b.HasOne("MindYourMoodWeb.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.ThoughtRecord", b =>
                {
                    b.HasOne("MindYourMoodWeb.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.Track", b =>
                {
                    b.HasOne("MindYourMoodWeb.Entities.PlayList", "PlayList")
                        .WithMany("Tracks")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayList");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.AppRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.AppUser", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.Appointment", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.AutomaticThought", b =>
                {
                    b.Navigation("EvidenceAgainstHotThought");

                    b.Navigation("EvidenceForHotThought");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.Medication", b =>
                {
                    b.Navigation("MedicationTimes");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.MedicationSpread", b =>
                {
                    b.Navigation("MedicationTimes");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.PlayList", b =>
                {
                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.Prescription", b =>
                {
                    b.Navigation("Medications");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.Problem", b =>
                {
                    b.Navigation("Steps");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.ProblemIdea", b =>
                {
                    b.Navigation("ProsAndCons");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.ProblemStep", b =>
                {
                    b.Navigation("Ideas");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.SolutionReview", b =>
                {
                    b.Navigation("SolutionSteps");
                });

            modelBuilder.Entity("MindYourMoodWeb.Entities.ThoughtRecord", b =>
                {
                    b.Navigation("AlternativeThoughts");

                    b.Navigation("AutomaticThoughts");

                    b.Navigation("EvidenceAgainst");

                    b.Navigation("EvidenceFor");

                    b.Navigation("Moods");

                    b.Navigation("ReRateMoods");

                    b.Navigation("Situation");
                });
#pragma warning restore 612, 618
        }
    }
}
